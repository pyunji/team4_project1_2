<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mycompany.webapp.dao.ProductDao">

	<resultMap type="productCommon" id="productCommonMap">
		<id property="id" column="pcommonId"/>
		<result property="name" column="productName"/>
		<result property="note" column="note"/>
		<result property="brandNo" column="brandNo"/>
	</resultMap>
	
	<resultMap type="productColor" id="productColorMap">
		<id property="id" column="pcolorId"/>
		<result property="img1" column="img1"/>
		<result property="img2" column="img2"/>
		<result property="img3" column="img3"/>
		<result property="colorImg" column="colorImg"/>
		<result property="productCommonId" column="productCommonId"/>
		<result property="colorCode" column="colorCode"/>
		<result property="price" column="price"/>
	</resultMap>
	
	<resultMap type="productStock" id="productStockMap">
		<id property="id" column="id"/>
		<result property="productColorId" column="productColorId"/>
		<result property="sizeCode" column="size_code"/>
		<result property="stock" column="stock"/>
	</resultMap>

	<resultMap type="brand" id="brandMap">
		<id property="no" column="no"/>
		<result property="name" column="brandName"/>
	</resultMap>
	
	<resultMap type="category" id="categoryMap">
		<id property="no" column="no"/>
		<result property="depth1Name" column="depth1_name"/>
		<result property="depth2Name" column="depth2_name"/>
		<result property="depth3Name" column="depth3_name"/>
	</resultMap>
	
	<resultMap type="com.mycompany.webapp.dto.Product" id="productMap">
		<collection property="productCommon" resultMap="productCommonMap"/>
		<collection property="productColor" resultMap="productColorMap"/>
		<collection property="productStock" resultMap="productStockMap"/>
		<collection property="brand" resultMap="brandMap"/>
		<collection property="category" resultMap="categoryMap"/>
	</resultMap>
	
	
	<select id="selectProductOrderByStockRandom" resultMap="productMap">
		<![CDATA[
		select distinct pcolorId, productName, stock, img1, price, brandName
		from(
		    select distinct product_color_id as pcolorId, product_common.name as productName, stock, img1, price, brand.name as brandName
		    from product_stock, product_color, brand, product_common
		    where stock < 5 and stock > 0
		    and product_color_id = product_color.id
		    and product_common_id = product_common.id
		    and brand_no = brand.no
		    order by dbms_random.value
		    )
		where rownum < 13
		]]>
	</select>
	
	<select id="selectProductByPcolorId" parameterType="String" resultMap="productMap">
		select distinct brand.name as brandName, product_common.name as productName 
				, price, product_color.id as pcolorId, product_common.id as pcommonId, note
				, img1, img2, img3, product_color.color_code as colorCode
			from product_common, product_color, brand, product_stock
			where product_common.id = product_color.product_common_id 
			and brand.no = product_common.brand_no
			and product_stock.product_color_id = product_color.id
	        and product_color.id = #{pcolorId}
	</select>

	
	<select id="getProductByCategory" parameterType="com.mycompany.webapp.dto.CategoryDepth" resultMap="productMap">
		
		select rnum, brandName, productName, img1, price, pcolorId, depth1_name, depth2_name, depth3_name
		from (
		select rownum as rnum, brandName, productName, img1, price, pcolorId, depth1_name, depth2_name, depth3_name
		from (
			select 
			br_tbl.name as brandName,
			pcom_tbl.name as productName,
			pcol_tbl.img1 as img1,
			pcol_tbl.price as price,
			pcol_tbl.id as pcolorId,
			pcol_tbl.product_common_id as productCommonId,
			cat_tbl.depth1_name as depth1_name,
			cat_tbl.depth2_name as depth2_name,
			cat_tbl.depth3_name as depth3_name
			from
			(select id, product_common_id, img1, price
			from product_color
			where ROWID in (select max(rowid) from product_color group by product_common_id)) pcol_tbl
			join product_common pcom_tbl
			on (pcol_tbl.product_common_id = pcom_tbl.id)
			join brand br_tbl
			on(pcom_tbl.brand_no = br_tbl.no)
			join product_category procat_tbl
			on(pcol_tbl.product_common_id = procat_tbl.product_common_id)
			join category cat_tbl
			on(cat_tbl.no = procat_tbl.category_no)
			where cat_tbl.no in (select no from category where 
			depth1_name=#{depth1}
			<if test="depth2 != null">
			and depth2_name=#{depth2}
			</if>
			<if test="depth3 != null"> 
			and depth3_name=#{depth3}
			</if>
			)
			order by pcolorId
		)
		where rownum &lt;=#{pager.endRowNo}
		)
		where rnum &gt;=#{pager.startRowNo}
	</select>
	
	<select id="countByCategory" parameterType="com.mycompany.webapp.dto.CategoryDepth" resultType="int">
		select count(*) from(
			select 
			br_tbl.name as brandName,
			pcom_tbl.name as productName,
			pcol_tbl.img1 as img1,
			pcol_tbl.price as price,
			pcol_tbl.id as pcolorId,
			pcol_tbl.product_common_id as productCommonId,
			cat_tbl.depth1_name as depth1_name,
			cat_tbl.depth2_name as depth2_name,
			cat_tbl.depth3_name as depth3_name
			from
			(select id, product_common_id, img1, price
			from product_color
			where ROWID in (select max(rowid) from product_color group by product_common_id)) pcol_tbl
			join product_common pcom_tbl
			on (pcol_tbl.product_common_id = pcom_tbl.id)
			join brand br_tbl
			on(pcom_tbl.brand_no = br_tbl.no)
			join product_category procat_tbl
			on(pcol_tbl.product_common_id = procat_tbl.product_common_id)
			join category cat_tbl
			on(cat_tbl.no = procat_tbl.category_no)
			where cat_tbl.no in (select no from category where 
			depth1_name=#{depth1}
			<if test="depth2 != null">
			and depth2_name=#{depth2}
			</if>
			<if test="depth3 != null"> 
			and depth3_name=#{depth3}
			</if>
		)
		order by pcolorId
		)
	</select>
	<!-- 상품의 컬러 리스트 출력하기 -->
	<select id="selectColorsByPcolorId" parameterType="String" resultType="com.mycompany.webapp.dto.Color">
	select distinct color_code, color_img
	    from product_common, product_color
	    where product_color.product_common_id = (select product_common.id as pcommon_id
	        from product_color, product_common 
	        where product_color.id = #{pcolorId}
	        and product_color.product_common_id = product_common.id)
	</select>
	<!-- 상품의 사이즈 리스트 출력하기 -->
	<select id="selectSizesByPcolorId" parameterType="String" resultType="com.mycompany.webapp.dto.Size">
	select size_code
	from (select distinct sizes.no, size_code
	    from product_color, product_stock, SIZES
	    where product_color.id = #{pcolorId}
	    and product_color.id = product_stock.product_color_id
	    and sizes.code = product_stock.size_code
	    order by sizes.no)
	</select>
	
	<!-- 함께 코디한 상품의 정보 pcolorId로 가져오기 -->
	<select id="selectWithItemsByPcolorId" parameterType="String" resultMap="productMap">
	select distinct brand.name as brandName, product_common.name as productName , product_color.id as pcolorId
					, product_color.price, product_color.product_common_id as pcommonId, product_color.img1
	from product_color, brand, product_common
	where product_color.id in (
        select distinct w.color_id as wcolorId
        from with_product w left join product_color p on (w.product_color_id = p.id)
        where p.id = #{pcolorId}
        )
    and product_common.id = product_color.product_common_id
	and product_common.brand_no = brand.no
	</select>
	
	<!-- 제품의 사이즈 정보와 재고 정보를 사이즈 순서로 획득한다.-->
	<select id="getStock" parameterType="String" resultType="com.mycompany.webapp.vo.ProductStock">
		SELECT PRODUCT_COLOR_ID as productColorId, SIZE_CODE as sizeCode, stock
		FROM PRODUCT_STOCK, PRODUCT_COLOR, SIZES
		WHERE PRODUCT_STOCK.PRODUCT_COLOR_ID = PRODUCT_COLOR.ID 
		AND SIZES.CODE = PRODUCT_STOCK.SIZE_CODE
		AND PRODUCT_COLOR.ID = #{pcolorId}
		ORDER BY SIZES.NO
	</select>
	
</mapper>